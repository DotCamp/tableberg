diff --git a/packages/pro/includes/Blocks/StyledList.php b/packages/pro/includes/Blocks/StyledList.php
index 1e1b7f2..ae3943a 100644
--- a/packages/pro/includes/Blocks/StyledList.php
+++ b/packages/pro/includes/Blocks/StyledList.php
@@ -20,87 +20,86 @@ use Tableberg\Utils\Utils;
 class StyledList
 {
 
-	public static $count = 0;
-	/**
-	 * Constructor
-	 *
-	 * @return void
-	 */
-	public function __construct()
-	{
-		add_action('init', array($this, 'styled_list_block_registration'));
-
-	}
-
-	/**
-	 * Get block styles.
-	 *
-	 * @param array $attributes - block attributes.
-	 * @return string Generated CSS styles.
-	 */
-	public static function get_styles(array $attributes, string $id, bool $hasIcon)
-	{
-
-		$styles = array(
-			'color' => $attributes['textColor'],
-			'background' => $attributes['backgroundColor'],
-			'font-size' => $attributes['fontSize']??'',
-			'--tableberg-styled-list-icon-color' => $attributes['iconColor'],
-			'--tableberg-styled-list-icon-size' => $attributes['iconSize'],
-			'--tableberg-styled-list-icon-spacing' => Utils::get_spacing_css_single($attributes['iconSpacing']),
-			'--tableberg-styled-list-inner-spacing' => Utils::get_spacing_css_single(isset($attributes['listIndent']) ? $attributes['listIndent'] : ''),
-		);
-
-		$styles += Utils::get_spacing_style($attributes['listSpacing']??[], 'padding');
-
-		Assets::$dynamicStyles .= '#' . $id . ' > li > .tableberg-list-item-inner {align-items: ' . $attributes['alignItems'] . ';}';
-
-		if (isset($attributes['itemSpacing'])) {
-			$iSpacing = Utils::get_spacing_css_single($attributes['itemSpacing']);
-			if ($iSpacing != '0') {
-				Assets::$dynamicStyles .= '#' . $id . ' > li {margin-bottom: ' . $iSpacing . ';}';
-			}
-		}
-
-		return Utils::generate_css_string($styles);
-	}
-	/**
-	 * Renders the block on the server.
-	 *
-	 * @param array    $attributes The block attributes.
-	 * @param string   $contents    The block content.
-	 * @param WP_Block $block      The block object.
-	 * @return string Returns the HTML content for the custom cell block.
-	 */
-	public function tableberg_render_styled_list_block($attributes, $contents, $block)
-	{
-
-		$icon = Common::get_icon_svg($attributes);
-		$contents = str_replace('::__TABLEBERG_STYLED_LIST_ICON__::', $icon, $contents);
-		$contents = HtmlUtils::append_attr_value($contents, 'ul', ' tableberg-styled-list', 'class');
-
-		$id = '__tableberg_styled_list_' . self::$count++;
-
-		$contents = HtmlUtils::append_attr_value($contents, 'ul', self::get_styles($attributes, $id, !!$icon), 'style');
-		$contents = HtmlUtils::append_attr_value($contents, 'ul', $id, 'id');
-		return $contents;
-	}
-
-	/**
-	 * Register the block.
-	 */
-	public function styled_list_block_registration()
-	{
-
-		$json = TABLEBERG_PRO_DIR_PATH . 'dist/blocks/styled-list/block.json';
-		$attrs = json_decode(file_get_contents($json), true)['attributes'];
-
-		register_block_type_from_metadata(
-			$json,
-			array(
-				'attributes' => $attrs,
-				'render_callback' => array($this, 'tableberg_render_styled_list_block'),
-			)
-		);
-	}
-}
\ No newline at end of file
+  public static $count = 0;
+  /**
+   * Constructor
+   *
+   * @return void
+   */
+  public function __construct()
+  {
+    add_action('init', array($this, 'styled_list_block_registration'));
+  }
+
+  /**
+   * Get block styles.
+   *
+   * @param array $attributes - block attributes.
+   * @return string Generated CSS styles.
+   */
+  public static function get_styles(array $attributes, string $id, bool $hasIcon)
+  {
+
+    $styles = array(
+      'color' => $attributes['textColor'],
+      'background' => $attributes['backgroundColor'],
+      'font-size' => $attributes['fontSize'] ?? '',
+      '--tableberg-styled-list-icon-color' => $attributes['iconColor'],
+      '--tableberg-styled-list-icon-size' => $attributes['iconSize'],
+      '--tableberg-styled-list-icon-spacing' => Utils::get_spacing_css_single($attributes['iconSpacing']),
+      '--tableberg-styled-list-inner-spacing' => Utils::get_spacing_css_single(isset($attributes['listIndent']) ? $attributes['listIndent'] : ''),
+    );
+
+    $styles += Utils::get_spacing_style($attributes['listSpacing'] ?? [], 'padding');
+
+    Assets::$dynamicStyles .= '#' . $id . ' > li > .tableberg-list-item-inner {align-items: ' . $attributes['alignItems'] . ';}';
+
+    if (isset($attributes['itemSpacing'])) {
+      $iSpacing = Utils::get_spacing_css_single($attributes['itemSpacing']);
+      if ($iSpacing != '0') {
+        Assets::$dynamicStyles .= '#' . $id . ' > li {margin-bottom: ' . $iSpacing . ';}';
+      }
+    }
+
+    return Utils::generate_css_string($styles);
+  }
+  /**
+   * Renders the block on the server.
+   *
+   * @param array    $attributes The block attributes.
+   * @param string   $contents    The block content.
+   * @param WP_Block $block      The block object.
+   * @return string Returns the HTML content for the custom cell block.
+   */
+  public function tableberg_render_styled_list_block($attributes, $contents, $block)
+  {
+
+    $icon = Common::get_icon_svg($attributes);
+    $contents = str_replace('::__TABLEBERG_STYLED_LIST_ICON__::', $icon, $contents);
+    $contents = HtmlUtils::append_attr_value($contents, 'ul', ' tableberg-styled-list', 'class');
+
+    $id = '__tableberg_styled_list_' . self::$count++;
+
+    $contents = HtmlUtils::append_attr_value($contents, 'ul', self::get_styles($attributes, $id, !!$icon), 'style');
+    $contents = HtmlUtils::append_attr_value($contents, 'ul', $id, 'id');
+    return $contents;
+  }
+
+  /**
+   * Register the block.
+   */
+  public function styled_list_block_registration()
+  {
+
+    $json = TABLEBERG_PRO_DIR_PATH . 'dist/blocks/styled-list/block.json';
+    $attrs = json_decode(file_get_contents($json), true)['attributes'];
+
+    register_block_type_from_metadata(
+      $json,
+      array(
+        'attributes' => $attrs,
+        'render_callback' => array($this, 'tableberg_render_styled_list_block'),
+      )
+    );
+  }
+}
diff --git a/packages/pro/src/editor.scss b/packages/pro/src/editor.scss
index bbc48d2..7cf6ea8 100644
--- a/packages/pro/src/editor.scss
+++ b/packages/pro/src/editor.scss
@@ -4,6 +4,7 @@
 @import "./blocks/styled-list/editor.scss";
 @import "./blocks/html/editor.scss";
 @import "./block-enhancements/cell/editor.scss";
+@import "./blocks/tab/style.scss";
 /***
 * Components
 ***/
diff --git a/packages/pro/src/index.tsx b/packages/pro/src/index.tsx
index ab316f9..48916fc 100644
--- a/packages/pro/src/index.tsx
+++ b/packages/pro/src/index.tsx
@@ -11,5 +11,6 @@ import "./blocks/styled-list/styled-list-item";
 import "./blocks/html";
 import "./blocks/icon";
 import "./blocks/ribbon";
+import "./blocks/tab";
 
-import "./block-enhancements"
\ No newline at end of file
+import "./block-enhancements"
diff --git a/packages/pro/tableberg-pro.php b/packages/pro/tableberg-pro.php
index f729114..dc51ba1 100644
--- a/packages/pro/tableberg-pro.php
+++ b/packages/pro/tableberg-pro.php
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * Plugin Name:       Tableberg Pro
  * Description:       Tableberg Pro: table builder Gutenberg block
@@ -14,22 +15,22 @@
  */
 
 if (!defined('ABSPATH')) {
-	exit; // Exit if accessed directly.
+  exit; // Exit if accessed directly.
 }
 
 if (!defined('TABLEBERG_PRO_VERSION')) {
-	define('TABLEBERG_PRO_VERSION', '0.0.2');
+  define('TABLEBERG_PRO_VERSION', '0.0.2');
 }
 
 if (!defined('TABLEBERG_PRO_DIR_PATH')) {
-	define('TABLEBERG_PRO_DIR_PATH', plugin_dir_path(__FILE__));
+  define('TABLEBERG_PRO_DIR_PATH', plugin_dir_path(__FILE__));
 }
 
 if (!defined('TABLEBERG_PRO_URL')) {
-	define('TABLEBERG_PRO_URL', plugin_dir_url(__FILE__));
+  define('TABLEBERG_PRO_URL', plugin_dir_url(__FILE__));
 }
 if (!defined('TABLEBERG_PRO_PLUGIN_FILE')) {
-	define('TABLEBERG_PRO_PLUGIN_FILE', __FILE__);
+  define('TABLEBERG_PRO_PLUGIN_FILE', __FILE__);
 }
 
 use Tableberg\Pro\Assets;
@@ -38,155 +39,153 @@ use Tableberg\Pro\Blocks;
 require_once __DIR__ . '/vendor/autoload.php';
 
 if (!function_exists('tp_fs')) {
-	// Create a helper function for easy SDK access.
-	function tp_fs()
-	{
-		global $tp_fs;
-
-		if (!isset($tp_fs)) {
-			// Include Freemius SDK.
-			if (file_exists(dirname(dirname(__FILE__)) . '/tableberg/includes/freemius/start.php')) {
-				// Try to load SDK from parent plugin folder.
-				require_once dirname(dirname(__FILE__)) . '/tableberg/includes/freemius/start.php';
-			} else if (file_exists(dirname(dirname(__FILE__)) . '/tableberg-pro/includes/freemius/start.php')) {
-				// Try to load SDK from premium parent plugin folder.
-				require_once dirname(dirname(__FILE__)) . '/tableberg-pro/includes/freemius/start.php';
-			} else {
-				require_once dirname(__FILE__) . '/includes/freemius/start.php';
-			}
-
-			$tp_fs = fs_dynamic_init(
-				array(
-					'id' => '14650',
-					'slug' => 'tableberg-pro',
-					'premium_slug' => 'tableberg-pro',
-					'type' => 'plugin',
-					'public_key' => 'pk_e89a9a631d5a65df8a50c74bc96e9',
-					'is_premium' => true,
-					'is_premium_only' => true,
-					'has_paid_plans' => true,
-					'is_org_compliant' => false,
-					'parent' => array(
-						'id' => '14649',
-						'slug' => 'tableberg',
-						'public_key' => 'pk_8043aa788c004c4b385af8384c74b',
-						'name' => 'Tableberg',
-					),
-					'menu' => array(
-						'slug' => 'tableberg-settings',
-						'first-path' => 'admin.php?page=tableberg-settings&route=welcome',
-					),
-				)
-			);
-		}
-
-		return $tp_fs;
-	}
+  // Create a helper function for easy SDK access.
+  function tp_fs()
+  {
+    global $tp_fs;
+
+    if (!isset($tp_fs)) {
+      // Include Freemius SDK.
+      if (file_exists(dirname(dirname(__FILE__)) . '/tableberg/includes/freemius/start.php')) {
+        // Try to load SDK from parent plugin folder.
+        require_once dirname(dirname(__FILE__)) . '/tableberg/includes/freemius/start.php';
+      } else if (file_exists(dirname(dirname(__FILE__)) . '/tableberg-pro/includes/freemius/start.php')) {
+        // Try to load SDK from premium parent plugin folder.
+        require_once dirname(dirname(__FILE__)) . '/tableberg-pro/includes/freemius/start.php';
+      } else {
+        require_once dirname(__FILE__) . '/includes/freemius/start.php';
+      }
+
+      $tp_fs = fs_dynamic_init(
+        array(
+          'id' => '14650',
+          'slug' => 'tableberg-pro',
+          'premium_slug' => 'tableberg-pro',
+          'type' => 'plugin',
+          'public_key' => 'pk_e89a9a631d5a65df8a50c74bc96e9',
+          'is_premium' => true,
+          'is_premium_only' => true,
+          'has_paid_plans' => true,
+          'is_org_compliant' => false,
+          'parent' => array(
+            'id' => '14649',
+            'slug' => 'tableberg',
+            'public_key' => 'pk_8043aa788c004c4b385af8384c74b',
+            'name' => 'Tableberg',
+          ),
+          'menu' => array(
+            'slug' => 'tableberg-settings',
+            'first-path' => 'admin.php?page=tableberg-settings&route=welcome',
+          ),
+        )
+      );
+    }
+
+    return $tp_fs;
+  }
 }
 
 
 function tp_fs_is_parent_active_and_loaded()
 {
-	// Check if the parent's init SDK method exists.
-	return function_exists('tab_fs');
+  // Check if the parent's init SDK method exists.
+  return function_exists('tab_fs');
 }
 
 function tp_fs_is_parent_active()
 {
-	$active_plugins = get_option('active_plugins', array());
-
-	if (is_multisite()) {
-		$network_active_plugins = get_site_option('active_sitewide_plugins', array());
-		$active_plugins = array_merge($active_plugins, array_keys($network_active_plugins));
-	}
-
-	foreach ($active_plugins as $basename) {
-		if (
-			0 === strpos($basename, 'tableberg/') ||
-			0 === strpos($basename, 'tableberg-pro-premium/')
-		) {
-			return true;
-		}
-	}
-
-	return false;
+  $active_plugins = get_option('active_plugins', array());
+
+  if (is_multisite()) {
+    $network_active_plugins = get_site_option('active_sitewide_plugins', array());
+    $active_plugins = array_merge($active_plugins, array_keys($network_active_plugins));
+  }
+
+  foreach ($active_plugins as $basename) {
+    if (
+      0 === strpos($basename, 'tableberg/') ||
+      0 === strpos($basename, 'tableberg-pro-premium/')
+    ) {
+      return true;
+    }
+  }
+
+  return false;
 }
 
 function tp_fs_init()
 {
-	if (tp_fs_is_parent_active_and_loaded()) {
-		// Init Freemius.
-		tp_fs();
-
-
-		// Signal that the add-on's SDK was initiated.
-		do_action('tp_fs_loaded');
-
-		// Parent is active, add your init code here.
-		if (!class_exists('Tableberg_Pro_Main')) {
-			/**
-			 * Tableberg Pro main class.
-			 */
-			class Tableberg_Pro_Main
-			{
-
-
-				/**
-				 * Constructor.
-				 *
-				 * @return void
-				 */
-				public function __construct()
-				{
-					new Blocks\StarRating();
-					new Blocks\StyledList();
-					new Blocks\StyledListItem();
-					new Blocks\Html();
-					new Blocks\Icon();
-					new Blocks\Ribbon();
-					new Assets();
-
-					\Tableberg\Patterns\RegisterPatterns::from_dir(__DIR__ . '/includes/patterns');
-				}
-			}
-			if (tp_fs()->can_use_premium_code()) {
-				new Tableberg_Pro_Main();
-			}
-
-		}
-
-	} else {
-		// Parent is inactive, add your error handling here.
-	}
+  if (tp_fs_is_parent_active_and_loaded()) {
+    // Init Freemius.
+    tp_fs();
+
+
+    // Signal that the add-on's SDK was initiated.
+    do_action('tp_fs_loaded');
+
+    // Parent is active, add your init code here.
+    if (!class_exists('Tableberg_Pro_Main')) {
+      /**
+       * Tableberg Pro main class.
+       */
+      class Tableberg_Pro_Main
+      {
+
+
+        /**
+         * Constructor.
+         *
+         * @return void
+         */
+        public function __construct()
+        {
+          new Blocks\StarRating();
+          new Blocks\StyledList();
+          new Blocks\StyledListItem();
+          new Blocks\Html();
+          new Blocks\Icon();
+          new Blocks\Ribbon();
+          new Blocks\Tab();
+          new Assets();
+          \Tableberg\Patterns\RegisterPatterns::from_dir(__DIR__ . '/includes/patterns');
+        }
+      }
+      if (tp_fs()->can_use_premium_code()) {
+        new Tableberg_Pro_Main();
+      }
+    }
+  } else {
+    // Parent is inactive, add your error handling here.
+  }
 }
 
 if (tp_fs_is_parent_active_and_loaded()) {
-	// If parent already included, init add-on.
-	tp_fs_init();
+  // If parent already included, init add-on.
+  tp_fs_init();
 } else if (tp_fs_is_parent_active()) {
-	// Init add-on only after the parent is loaded.
-	add_action('tab_fs_loaded', 'tp_fs_init');
+  // Init add-on only after the parent is loaded.
+  add_action('tab_fs_loaded', 'tp_fs_init');
 } else {
-	// Even though the parent is not activated, execute add-on for activation / uninstall hooks.
-	tp_fs_init();
+  // Even though the parent is not activated, execute add-on for activation / uninstall hooks.
+  tp_fs_init();
 }
 
-function load_pro_textdomain() {
-	load_plugin_textdomain('tableberg',false,dirname(plugin_basename(__FILE__)) . '/languages');
+function load_pro_textdomain()
+{
+  load_plugin_textdomain('tableberg', false, dirname(plugin_basename(__FILE__)) . '/languages');
 }
 
 add_action('admin_init', function () {
-	if (!is_plugin_active('tableberg/tableberg.php')) {
-		if (is_plugin_active('tableberg-pro/tableberg-pro.php')) {
-			deactivate_plugins('tableberg-pro/tableberg-pro.php');
-			add_action('admin_notices', function () {
-				echo '<div class="notice notice-warning is-dismissible">
+  if (!is_plugin_active('tableberg/tableberg.php')) {
+    if (is_plugin_active('tableberg-pro/tableberg-pro.php')) {
+      deactivate_plugins('tableberg-pro/tableberg-pro.php');
+      add_action('admin_notices', function () {
+        echo '<div class="notice notice-warning is-dismissible">
                         <p>Tableberg Pro has been deactivated because Tableberg is not active.</p>
                       </div>';
-			});
-		}
+      });
+    }
 
-		load_pro_textdomain();
-	}
+    load_pro_textdomain();
+  }
 });
-  
diff --git a/packages/tableberg/includes/Blocks/Table.php b/packages/tableberg/includes/Blocks/Table.php
index e0b097e..70d036b 100644
--- a/packages/tableberg/includes/Blocks/Table.php
+++ b/packages/tableberg/includes/Blocks/Table.php
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * Table Block
  *
@@ -18,329 +19,327 @@ use WP_Block;
 class Table
 {
 
-	public static $rows = [];
-
-	/**
-	 * Constructor
-	 *
-	 * @return void
-	 */
-	public function __construct()
-	{
-		add_action('init', array($this, 'block_registration'));
-	}
-
-	/**
-	 * Get block styles.
-	 *
-	 * @param array $attributes - block attributes.
-	 * @return string Generated CSS styles.
-	 */
-	public static function get_styles($attributes)
-	{
-		$even_row_bg = Utils::get_background_color($attributes, 'evenRowBackgroundColor', 'evenRowBackgroundGradient');
-		$odd_row_bg = Utils::get_background_color($attributes, 'oddRowBackgroundColor', 'oddRowBackgroundGradient');
-		$header_bg = Utils::get_background_color($attributes, 'headerBackgroundColor', 'headerBackgroundGradient');
-		$footer_bg = Utils::get_background_color($attributes, 'footerBackgroundColor', 'footerBackgroundGradient');
-
-
-		$cellSpacing = $attributes['cellSpacing'] ?? [];
-		$table_spacing = Utils::get_spacing_css($cellSpacing);
-
-
-		$inner_border_variables = [];
-		if ($attributes['enableInnerBorder']) {
-			$inner_border_variables = Utils::get_border_variables_css($attributes['innerBorder'], 'inner');
-		}
-		if (!isset($table_spacing['top']) || $table_spacing['top'] == '0') {
-			$inner_border_variables["--tableberg-inner-border-top"] = "none";
-			$inner_border_variables["--tableberg-inner-border-top-first"] = $inner_border_variables["--tableberg-inner-border-bottom"] ?? '';
-		}
-
-		if (!isset($table_spacing['left']) || $table_spacing['left'] == '0') {
-			$inner_border_variables["--tableberg-inner-border-left"] = "none";
-			$inner_border_variables["--tableberg-inner-border-left-first"] = $inner_border_variables["--tableberg-inner-border-right"] ?? '';
-		}
-
-
-		$cell_radius = Utils::get_border_radius_var($attributes['cellBorderRadius'], '--tableberg-cell');
-
-		$styles = [
-			'width' => $attributes['tableWidth'],
-			'max-width' => $attributes['tableWidth'],
-			'color' => $attributes['fontColor'] ?? '',
-			'font-size' => $attributes['fontSize'] ?? '',
-			'--tableberg-global-link-color' => $attributes['linkColor'] ?? '',
-			'--tableberg-even-bg' => $even_row_bg,
-			'--tableberg-odd-bg' => $odd_row_bg,
-			'--tableberg-header-bg' => $header_bg,
-			'--tableberg-footer-bg' => $footer_bg,
-			'--tableberg-block-spacing' => Utils::get_spacing_css_single($attributes['blockSpacing'] ?? ''),
-			'border-spacing' => ($table_spacing['left'] ?? 0) . ' ' . ($table_spacing['top'] ?? 0),
-		]
-			+ Utils::get_spacing_style($attributes['cellPadding'], '--tableberg-cell-padding')
-			+ $inner_border_variables
-			+ $cell_radius;
-
-		return Utils::generate_css_string($styles);
-	}
-
-
-	private static function get_wrapper_styles($attributes)
-	{
-		$styles = Utils::get_border_style($attributes['tableBorder'] ?? []);
-		$styles += Utils::get_border_radius_style($attributes['tableBorderRadius'] ?? []);
-		return Utils::generate_css_string($styles);
-	}
-
-	/**
-	 * Class if styling is applied.
-	 *
-	 * @param array $attributes The block attributes.
-	 * @return array CSS classes based on attributes.
-	 */
-	public function get_style_class($attributes)
-	{
-		$table_width = $attributes['tableWidth'];
-
-		$enable_inner_border = $attributes['enableInnerBorder'];
-		$classes = array();
-		if ($enable_inner_border) {
-			$classes[] = 'has-inner-border';
-		}
-		$is_value_empty = function ($value) {
-			return (
-				is_null($value) ||
-				false === $value ||
-				trim($value) === '' ||
-				trim($value) === 'undefined undefined undefined' ||
-				empty($value)
-			);
-		};
-
-		if (!$is_value_empty($table_width)) {
-			$classes[] = 'has-table-width';
-		}
-
-
-		return $classes;
-	}
-
-
-
-	private static function get_responsiveness_metadata($attributes, $device)
-	{
-		if (!isset($attributes["responsive"])) {
-			return '';
-		}
-		$responsive = $attributes["responsive"]["breakpoints"];
-		$str = " ";
-		if (isset($responsive[$device]) && $responsive[$device]["enabled"]) {
-			$deviceOpts = $responsive[$device];
-			$str .= 'data-tableberg-' . $device . '-width="' . $deviceOpts["maxWidth"] . '" ';
-			$str .= 'data-tableberg-' . $device . '-mode="' . $deviceOpts["mode"] . '" ';
-			$str .= 'data-tableberg-' . $device . '-direction="' . $deviceOpts["direction"] . '" ';
-			$str .= 'data-tableberg-' . $device . '-count="' . $deviceOpts["stackCount"] . '" ';
-
-			if ($deviceOpts["headerAsCol"] && $attributes['enableTableHeader']) {
-				$str .= 'data-tableberg-' . $device . '-header="' . $deviceOpts["headerAsCol"] . '" ';
-			}
-		}
-		return $str;
-	}
-
-	/**
-	 * Renders the custom table block on the server.
-	 *
-	 * @param array    $attributes The block attributes.
-	 * @param string   $content    The block content.
-	 * @param WP_Block $block      The block object.
-	 * @return string Returns the HTML content for the custom table block.
-	 */
-	public function render_tableberg_table_block($attributes, $content, $block)
-	{
-		$table_class_names = $this->get_style_class($attributes);
-		$table_style = $this->get_styles($attributes);
-
-		$table_attrs = 'class = "' . esc_attr(trim(join(' ', $table_class_names))) . '" style="' . $table_style . '" ';
-		
-		$table_attrs .= 'data-tableberg-header="' . $attributes['enableTableHeader'] . '" ';
-		$table_attrs .= 'data-tableberg-footer="' . $attributes['enableTableFooter'] . '" ';
-
-		$responsive = trim(self::get_responsiveness_metadata($attributes, 'mobile') . self::get_responsiveness_metadata($attributes, 'tablet'));
-		if ($responsive) {
-			$table_attrs .= 'data-tableberg-responsive data-tableberg-rows="' . $attributes['rows'] . '" data-tableberg-cols="' . $attributes['cols'] . '" ' . $responsive;
-		}
-
-		$wrapper_classes = ['wp-block-tableberg-wrapper'];
-		$table_alignment = $attributes['tableAlignment'];
-		if ($table_alignment && $table_alignment !== "center") {
-			$wrapper_classes[] = 'justify-table-' . $table_alignment;
-		}
-
-		if ($attributes['stickyTopRow']) {
-			$wrapper_classes[] = 'tableberg-sticky-top-row';
-		}
-		if ($attributes['stickyFirstCol']) {
-			$wrapper_classes[] = 'tableberg-sticky-first-col';
-		}
-		if ($attributes['innerBorderType'] === 'col') {
-			$wrapper_classes[] = 'tableberg-border-col-only';
-		} elseif ($attributes['innerBorderType'] === 'row') {
-			$wrapper_classes[] = 'tableberg-border-row-only';
-		}
-
-		if ($attributes['hideCellOutsideBorders'] ?? true) {
-			$wrapper_classes[] = 'tableberg-cell-no-outside-border';
-		}
-
-		if ($attributes['disableThemeStyle']) {
-			$wrapper_classes[] = 'tableberg-theme-disabled';
-		}
-
-		$wrapper_attributes = get_block_wrapper_attributes([
-			'class' => trim(join(' ', $wrapper_classes)),
-		]);
-
-		$colBorders = [];
-		$colGroup = '<colgroup>';
-
-		if ($attributes['fixedColWidth']) {
-			$fwidth = 100 / (int) $attributes['cols'] . '%';
-		}
-
-		for ($i = 0; $i < $attributes['cols']; $i++) {
-			$colStyle = $attributes['colStyles'][$i] ?? [];
-			$width = $fwidth ?? Utils::get_spacing_css_single($colStyle['width'] ?? '');
-
-			$colCss = Utils::generate_css_string([
-				'width' => $width,
-				'min-width' => $width,
-				'background' => Utils::get_background_color($colStyle, 'background', 'bgGradient'),
-			]);
-
-			$colGroup .= '<col style="' . $colCss . '"/>';
-			$colBorders[$i] = Utils::generate_css_string(
-				Utils::get_border_variables_css($colStyle['border'] ?? [], 'col')
-				+ Utils::get_border_radius_var($colStyle['borderRadius'] ?? [], '--tableberg-col')
-			);
-		}
-
-		$colGroup .= '</colgroup>';
-
-		$content = '<tbody>';
-
-		$isHSort = isset($attributes['sort']['horizontal']['enabled']) && $attributes['sort']['horizontal']['enabled'];
-		$isVSort = isset($attributes['sort']['vertical']['enabled']) && $attributes['sort']['vertical']['enabled'];
-
-		for ($i = 0; $i < $attributes['rows']; $i++) {
-			$rowStyle = $attributes['rowStyles'][$i] ?? [];
-			$rowCss = Utils::generate_css_string([
-				'height' => Utils::get_spacing_css_single($rowStyle['height'] ?? ''),
-			] + Utils::get_border_radius_var($rowStyle['borderRadius'] ?? [], '--tableberg-row'));
-			$tagName = 'td';
-			$trClasses = '';
-			$isEven = $i % 2 === 1;
-			$isHeader = $i === 0 && $attributes['enableTableHeader'];
-			$isFooter = $attributes['enableTableFooter'] && $i === $attributes['rows'] - 1;
-
-			if ($attributes['enableTableHeader']) {
-				$isEven = !$isEven;
-			}
-
-			if ($isHeader) {
-				$tagName = 'th';
-				$trClasses = 'tableberg-header';
-			} elseif ($isFooter) {
-				$tagName = 'th';
-				$trClasses = 'tableberg-footer';
-			} elseif ($isEven) {
-				$trClasses = 'tableberg-even-row';
-			} else {
-				$trClasses = 'tableberg-odd-row';
-			}
-
-			$rowStyleCss = Utils::generate_css_string(Utils::get_border_variables_css($rowStyle['border'] ?? [], 'row'));
-
-			$rowBg = Utils::get_background_color($rowStyle, 'background', 'bgGradient');
-			if ($rowBg) {
-				$rowStyleCss .= 'background:' . esc_attr($rowBg) . ';';
-			} else {
-				$rowStyleCss .= '';
-			}
-
-
-
-
-			$sortingBtnV = '';
-
-			if ($isVSort && $i == 0) {
-				$sortingBtnV = '<button type="button" class="tableberg-v-sorter"></button>';
-			}
-
-			$content .= '<tr class="' . $trClasses . '" style="' . $rowStyleCss . '">';
-			for ($j = 0; $j < $attributes['cols']; $j++) {
-				$sortingBtns = $sortingBtnV;
-				if ($isHSort && $j == 0) {
-					$sortingBtns .= '<button type="button" class="tableberg-h-sorter"></button>';
-				}
-				$cell = self::$rows[$i][$j] ?? ' ';
-				$cell = HtmlUtils::append_attr_value($cell, $tagName, $rowCss . $colBorders[$j], 'style');
-				$cell = HtmlUtils::replace_closing_tag($cell, $tagName, $sortingBtns . '</' . $tagName . '>');
-				$content .= $cell;
-			}
-			$content .= '</tr>';
-		}
-
-		$content .= '</tbody>';
-
-		self::$rows = [];
-
-		$table = '';
-
-		if ($attributes['search']) {
-			$table = '
+  public static $rows = [];
+
+  /**
+   * Constructor
+   *
+   * @return void
+   */
+  public function __construct()
+  {
+    add_action('init', array($this, 'block_registration'));
+  }
+
+  /**
+   * Get block styles.
+   *
+   * @param array $attributes - block attributes.
+   * @return string Generated CSS styles.
+   */
+  public static function get_styles($attributes)
+  {
+    $even_row_bg = Utils::get_background_color($attributes, 'evenRowBackgroundColor', 'evenRowBackgroundGradient');
+    $odd_row_bg = Utils::get_background_color($attributes, 'oddRowBackgroundColor', 'oddRowBackgroundGradient');
+    $header_bg = Utils::get_background_color($attributes, 'headerBackgroundColor', 'headerBackgroundGradient');
+    $footer_bg = Utils::get_background_color($attributes, 'footerBackgroundColor', 'footerBackgroundGradient');
+
+
+    $cellSpacing = $attributes['cellSpacing'] ?? [];
+    $table_spacing = Utils::get_spacing_css($cellSpacing);
+
+
+    $inner_border_variables = [];
+    if ($attributes['enableInnerBorder']) {
+      $inner_border_variables = Utils::get_border_variables_css($attributes['innerBorder'], 'inner');
+    }
+    if (!isset($table_spacing['top']) || $table_spacing['top'] == '0') {
+      $inner_border_variables["--tableberg-inner-border-top"] = "none";
+      $inner_border_variables["--tableberg-inner-border-top-first"] = $inner_border_variables["--tableberg-inner-border-bottom"] ?? '';
+    }
+
+    if (!isset($table_spacing['left']) || $table_spacing['left'] == '0') {
+      $inner_border_variables["--tableberg-inner-border-left"] = "none";
+      $inner_border_variables["--tableberg-inner-border-left-first"] = $inner_border_variables["--tableberg-inner-border-right"] ?? '';
+    }
+
+
+    $cell_radius = Utils::get_border_radius_var($attributes['cellBorderRadius'], '--tableberg-cell');
+
+    $styles = [
+      'width' => $attributes['tableWidth'],
+      'max-width' => $attributes['tableWidth'],
+      'color' => $attributes['fontColor'] ?? '',
+      'font-size' => $attributes['fontSize'] ?? '',
+      '--tableberg-global-link-color' => $attributes['linkColor'] ?? '',
+      '--tableberg-even-bg' => $even_row_bg,
+      '--tableberg-odd-bg' => $odd_row_bg,
+      '--tableberg-header-bg' => $header_bg,
+      '--tableberg-footer-bg' => $footer_bg,
+      '--tableberg-block-spacing' => Utils::get_spacing_css_single($attributes['blockSpacing'] ?? ''),
+      'border-spacing' => ($table_spacing['left'] ?? 0) . ' ' . ($table_spacing['top'] ?? 0),
+    ]
+      + Utils::get_spacing_style($attributes['cellPadding'], '--tableberg-cell-padding')
+      + $inner_border_variables
+      + $cell_radius;
+
+    return Utils::generate_css_string($styles);
+  }
+
+
+  private static function get_wrapper_styles($attributes)
+  {
+    $styles = Utils::get_border_style($attributes['tableBorder'] ?? []);
+    $styles += Utils::get_border_radius_style($attributes['tableBorderRadius'] ?? []);
+    return Utils::generate_css_string($styles);
+  }
+
+  /**
+   * Class if styling is applied.
+   *
+   * @param array $attributes The block attributes.
+   * @return array CSS classes based on attributes.
+   */
+  public function get_style_class($attributes)
+  {
+    $table_width = $attributes['tableWidth'];
+
+    $enable_inner_border = $attributes['enableInnerBorder'];
+    $classes = array();
+    if ($enable_inner_border) {
+      $classes[] = 'has-inner-border';
+    }
+    $is_value_empty = function ($value) {
+      return (
+        is_null($value) ||
+        false === $value ||
+        trim($value) === '' ||
+        trim($value) === 'undefined undefined undefined' ||
+        empty($value)
+      );
+    };
+
+    if (!$is_value_empty($table_width)) {
+      $classes[] = 'has-table-width';
+    }
+
+
+    return $classes;
+  }
+
+
+
+  private static function get_responsiveness_metadata($attributes, $device)
+  {
+    if (!isset($attributes["responsive"])) {
+      return '';
+    }
+    $responsive = $attributes["responsive"]["breakpoints"];
+    $str = " ";
+    if (isset($responsive[$device]) && $responsive[$device]["enabled"]) {
+      $deviceOpts = $responsive[$device];
+      $str .= 'data-tableberg-' . $device . '-width="' . $deviceOpts["maxWidth"] . '" ';
+      $str .= 'data-tableberg-' . $device . '-mode="' . $deviceOpts["mode"] . '" ';
+      $str .= 'data-tableberg-' . $device . '-direction="' . $deviceOpts["direction"] . '" ';
+      $str .= 'data-tableberg-' . $device . '-count="' . $deviceOpts["stackCount"] . '" ';
+
+      if ($deviceOpts["headerAsCol"] && $attributes['enableTableHeader']) {
+        $str .= 'data-tableberg-' . $device . '-header="' . $deviceOpts["headerAsCol"] . '" ';
+      }
+    }
+    return $str;
+  }
+
+  /**
+   * Renders the custom table block on the server.
+   *
+   * @param array    $attributes The block attributes.
+   * @param string   $content    The block content.
+   * @param WP_Block $block      The block object.
+   * @return string Returns the HTML content for the custom table block.
+   */
+  public function render_tableberg_table_block($attributes, $content, $block)
+  {
+    $table_class_names = $this->get_style_class($attributes);
+    $table_style = $this->get_styles($attributes);
+
+    $table_attrs = 'class = "' . esc_attr(trim(join(' ', $table_class_names))) . '" style="' . $table_style . '" ';
+
+    $table_attrs .= 'data-tableberg-header="' . $attributes['enableTableHeader'] . '" ';
+    $table_attrs .= 'data-tableberg-footer="' . $attributes['enableTableFooter'] . '" ';
+
+    $responsive = trim(self::get_responsiveness_metadata($attributes, 'mobile') . self::get_responsiveness_metadata($attributes, 'tablet'));
+    if ($responsive) {
+      $table_attrs .= 'data-tableberg-responsive data-tableberg-rows="' . $attributes['rows'] . '" data-tableberg-cols="' . $attributes['cols'] . '" ' . $responsive;
+    }
+
+    $wrapper_classes = ['wp-block-tableberg-wrapper'];
+    $table_alignment = $attributes['tableAlignment'];
+    if ($table_alignment && $table_alignment !== "center") {
+      $wrapper_classes[] = 'justify-table-' . $table_alignment;
+    }
+
+    if ($attributes['stickyTopRow']) {
+      $wrapper_classes[] = 'tableberg-sticky-top-row';
+    }
+    if ($attributes['stickyFirstCol']) {
+      $wrapper_classes[] = 'tableberg-sticky-first-col';
+    }
+    if ($attributes['innerBorderType'] === 'col') {
+      $wrapper_classes[] = 'tableberg-border-col-only';
+    } elseif ($attributes['innerBorderType'] === 'row') {
+      $wrapper_classes[] = 'tableberg-border-row-only';
+    }
+
+    if ($attributes['hideCellOutsideBorders'] ?? true) {
+      $wrapper_classes[] = 'tableberg-cell-no-outside-border';
+    }
+
+    if ($attributes['disableThemeStyle']) {
+      $wrapper_classes[] = 'tableberg-theme-disabled';
+    }
+
+    $wrapper_attributes = get_block_wrapper_attributes([
+      'class' => trim(join(' ', $wrapper_classes)),
+    ]);
+
+    $colBorders = [];
+    $colGroup = '<colgroup>';
+
+    if ($attributes['fixedColWidth']) {
+      $fwidth = 100 / (int) $attributes['cols'] . '%';
+    }
+
+    for ($i = 0; $i < $attributes['cols']; $i++) {
+      $colStyle = $attributes['colStyles'][$i] ?? [];
+      $width = $fwidth ?? Utils::get_spacing_css_single($colStyle['width'] ?? '');
+
+      $colCss = Utils::generate_css_string([
+        'width' => $width,
+        'min-width' => $width,
+        'background' => Utils::get_background_color($colStyle, 'background', 'bgGradient'),
+      ]);
+
+      $colGroup .= '<col style="' . $colCss . '"/>';
+      $colBorders[$i] = Utils::generate_css_string(
+        Utils::get_border_variables_css($colStyle['border'] ?? [], 'col')
+          + Utils::get_border_radius_var($colStyle['borderRadius'] ?? [], '--tableberg-col')
+      );
+    }
+
+    $colGroup .= '</colgroup>';
+
+    $content = '<tbody>';
+
+    $isHSort = isset($attributes['sort']['horizontal']['enabled']) && $attributes['sort']['horizontal']['enabled'];
+    $isVSort = isset($attributes['sort']['vertical']['enabled']) && $attributes['sort']['vertical']['enabled'];
+
+    for ($i = 0; $i < $attributes['rows']; $i++) {
+      $rowStyle = $attributes['rowStyles'][$i] ?? [];
+      $rowCss = Utils::generate_css_string([
+        'height' => Utils::get_spacing_css_single($rowStyle['height'] ?? ''),
+      ] + Utils::get_border_radius_var($rowStyle['borderRadius'] ?? [], '--tableberg-row'));
+      $tagName = 'td';
+      $trClasses = '';
+      $isEven = $i % 2 === 1;
+      $isHeader = $i === 0 && $attributes['enableTableHeader'];
+      $isFooter = $attributes['enableTableFooter'] && $i === $attributes['rows'] - 1;
+
+      if ($attributes['enableTableHeader']) {
+        $isEven = !$isEven;
+      }
+
+      if ($isHeader) {
+        $tagName = 'th';
+        $trClasses = 'tableberg-header';
+      } elseif ($isFooter) {
+        $tagName = 'th';
+        $trClasses = 'tableberg-footer';
+      } elseif ($isEven) {
+        $trClasses = 'tableberg-even-row';
+      } else {
+        $trClasses = 'tableberg-odd-row';
+      }
+
+      $rowStyleCss = Utils::generate_css_string(Utils::get_border_variables_css($rowStyle['border'] ?? [], 'row'));
+
+      $rowBg = Utils::get_background_color($rowStyle, 'background', 'bgGradient');
+      if ($rowBg) {
+        $rowStyleCss .= 'background:' . esc_attr($rowBg) . ';';
+      } else {
+        $rowStyleCss .= '';
+      }
+
+
+
+
+      $sortingBtnV = '';
+
+      if ($isVSort && $i == 0) {
+        $sortingBtnV = '<button type="button" class="tableberg-v-sorter"></button>';
+      }
+
+      $content .= '<tr class="' . $trClasses . '" style="' . $rowStyleCss . '">';
+      for ($j = 0; $j < $attributes['cols']; $j++) {
+        $sortingBtns = $sortingBtnV;
+        if ($isHSort && $j == 0) {
+          $sortingBtns .= '<button type="button" class="tableberg-h-sorter"></button>';
+        }
+        $cell = self::$rows[$i][$j] ?? ' ';
+        $cell = HtmlUtils::append_attr_value($cell, $tagName, $rowCss . $colBorders[$j], 'style');
+        $cell = HtmlUtils::replace_closing_tag($cell, $tagName, $sortingBtns . '</' . $tagName . '>');
+        $content .= $cell;
+      }
+      $content .= '</tr>';
+    }
+
+    $content .= '</tbody>';
+
+    self::$rows = [];
+
+    $table = '';
+
+    if ($attributes['search']) {
+      $table = '
 				<div class="tableberg-search tableberg-search-' . $attributes['searchPosition'] . '">
-					<input type="text" placeholder="' . esc_attr( isset($attributes['searchPlaceholder']) && $attributes['searchPlaceholder'] !== 'Search...' ? $attributes['searchPlaceholder']: __('Search...', 'tableberg')). '" data-tableberg-search />
+					<input type="text" placeholder="' . esc_attr(isset($attributes['searchPlaceholder']) && $attributes['searchPlaceholder'] !== 'Search...' ? $attributes['searchPlaceholder'] : __('Search...', 'tableberg')) . '" data-tableberg-search />
 					<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="magnifying-glass" class="svg-inline--fa fa-magnifying-glass " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
 						<path fill="currentColor" d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path>
 					</svg>
 				</div>
 			';
-		}
+    }
 
-		$table .= '
+    $table .= '
 			<div class="tableberg-table-wrapper" style="' . self::get_wrapper_styles($attributes) . '">
 				<table ' . $table_attrs . ' >' . $colGroup . $content . '</table>
 			</div>
 		';
 
 
-
-		return '<div ' . $wrapper_attributes . ' >' . $table . '</div>';
-	}
-
-
-	/**
-	 * Register the block.
-	 */
-	public function block_registration()
-	{
-		$tableberg_assets = new \Tableberg\Assets();
-		$tableberg_assets->register_blocks_assets();
-		if (!is_admin()) {
-			$tableberg_assets->register_frontend_assets();
-		}
-		$jsonPath = TABLEBERG_DIR_PATH . 'build/block.json';
-		$attrs = json_decode(file_get_contents($jsonPath), true)['attributes'];
-
-		register_block_type_from_metadata(
-			$jsonPath,
-			[
-				'attributes' => $attrs,
-				'render_callback' => array($this, 'render_tableberg_table_block'),
-			]
-		);
-
-	}
+    return '<div ' . $wrapper_attributes . ' >' . $table . '</div>';
+  }
+
+
+  /**
+   * Register the block.
+   */
+  public function block_registration()
+  {
+    $tableberg_assets = new \Tableberg\Assets();
+    $tableberg_assets->register_blocks_assets();
+    if (!is_admin()) {
+      $tableberg_assets->register_frontend_assets();
+    }
+    $jsonPath = TABLEBERG_DIR_PATH . 'build/block.json';
+    $attrs = json_decode(file_get_contents($jsonPath), true)['attributes'];
+
+    register_block_type_from_metadata(
+      $jsonPath,
+      [
+        'attributes' => $attrs,
+        'render_callback' => array($this, 'render_tableberg_table_block'),
+      ]
+    );
+  }
 }
